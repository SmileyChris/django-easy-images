from _typeshed import Incomplete

import pyvips

class ImageType(type):
    def __getattr__(cls, name): ...

class Image(pyvips.VipsObject):
    width: int
    height: int
    def __init__(self, pointer) -> None: ...
    @staticmethod
    def new_from_file(vips_filename, **kwargs) -> Image: ...
    @staticmethod
    def new_from_buffer(data, options, **kwargs) -> Image: ...
    @staticmethod
    def new_from_list(array, scale: float = ..., offset: float = ...) -> Image: ...
    @classmethod
    def new_from_array(
        cls,
        obj,
        scale: float = ...,
        offset: float = ...,
        interpretation: Incomplete | None = ...,
    ) -> Image: ...
    @staticmethod
    def new_from_memory(data, width, height, bands, format) -> Image: ...
    @staticmethod
    def new_from_source(source, options, **kwargs) -> Image: ...
    @staticmethod
    def new_temp_file(format) -> Image: ...
    def new_from_image(self, value) -> Image: ...
    def copy_memory(self): ...
    def write_to_file(self, vips_filename, **kwargs): ...
    def write_to_buffer(self, format_string, **kwargs): ...
    def write_to_target(self, target, format_string, **kwargs): ...
    def write_to_memory(self): ...
    def write(self, other) -> None: ...
    def invalidate(self) -> None: ...
    def set_progress(self, progress) -> None: ...
    def set_kill(self, kill) -> None: ...
    def get_typeof(self, name): ...
    def get(self, name): ...
    def get_fields(self): ...
    def set_type(self, gtype, name, value) -> None: ...
    def set(self, name, value) -> None: ...
    def remove(self, name): ...
    def tolist(self): ...
    def __array__(self, dtype: Incomplete | None = ...): ...
    def numpy(self, dtype: Incomplete | None = ...): ...
    def __getattr__(self, name): ...
    def get_value(self, name): ...
    def set_value(self, name, value) -> None: ...
    def get_scale(self): ...
    def get_offset(self): ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback) -> None: ...
    def __getitem__(self, arg): ...
    def __call__(self, x, y): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __div__(self, other): ...
    def __rdiv__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def __floordiv__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __mod__(self, other): ...
    def __pow__(self, other): ...
    def __rpow__(self, other): ...
    def __abs__(self): ...
    def __lshift__(self, other): ...
    def __rshift__(self, other): ...
    def __and__(self, other): ...
    def __rand__(self, other): ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __xor__(self, other): ...
    def __rxor__(self, other): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __invert__(self): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def floor(self): ...
    def ceil(self): ...
    def rint(self): ...
    def bandand(self): ...
    def bandor(self): ...
    def bandeor(self): ...
    def bandsplit(self): ...
    def bandjoin(self, other): ...
    def atan2(self, other): ...
    def get_n_pages(self): ...
    def get_page_height(self): ...
    def pagesplit(self): ...
    def pagejoin(self, other): ...
    def composite(self, other, mode, **kwargs): ...
    def bandrank(self, other, **kwargs): ...
    def maxpos(self): ...
    def minpos(self): ...
    def real(self): ...
    def imag(self): ...
    def polar(self): ...
    def rect(self): ...
    def conj(self): ...
    def sin(self): ...
    def cos(self): ...
    def tan(self): ...
    def asin(self): ...
    def acos(self): ...
    def atan(self): ...
    def sinh(self): ...
    def cosh(self): ...
    def tanh(self): ...
    def asinh(self): ...
    def acosh(self): ...
    def atanh(self): ...
    def log(self): ...
    def log10(self): ...
    def exp(self): ...
    def exp10(self): ...
    def erode(self, mask): ...
    def dilate(self, mask): ...
    def median(self, size): ...
    def fliphor(self): ...
    def flipver(self): ...
    def rot90(self): ...
    def rot180(self): ...
    def rot270(self): ...
    def hasalpha(self): ...
    def addalpha(self): ...
    def ifthenelse(self, in1, in2, **kwargs): ...
    def scaleimage(self, **kwargs): ...
